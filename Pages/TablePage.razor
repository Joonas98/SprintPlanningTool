@page "/room/{RoomName}"
@inject NavigationManager NavigationManager
@inject PlanningService PlanningService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<button class="back-button" @onclick="ReturnToLandingPage">Back</button>

<h1 class="title">Sprint Planning: @RoomName</h1>

<p>Debug - Room Exists: @(Room != null ? "Yes" : "No")</p>

<div class="main-container flex-container">
    <table class="participants-table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Story Points</th>
            </tr>
        </thead>
        <tbody>
            @if (Room?.Participants != null)
            {
                @foreach (var participant in Room.Participants)
                {
                    <tr>
                        <td>
                            @participant.Name
                            @if (participant.IsScrumMaster)
                            {
                                <span class="scrum-master-indicator">Scrum Master</span>
                            }
                        </td>
                        <td>
                            @if (Room.PointsRevealed)
                            {
                                @participant.SelectedPoints
                            }
                            else
                            {
                                @if (participant.SelectedPoints == null)
                                {
                                    <em>Thinking...</em>
                                }
                                else
                                {
                                    <em>Hidden</em>
                                }
                            }
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>

    @if (Room?.PointsRevealed == true)
    {
        <div class="average-display">
            <h3>Average Story Points: @AverageStoryPoints</h3>
        </div>
    }

    @if (IsScrumMaster)
    {
        <div class="controls">
            <button @onclick="RevealPoints" class="control-button">Reveal Points</button>
            <button @onclick="ResetPoints" class="control-button">Reset Points</button>
        </div>
    }

    <div class="cards">
        @foreach (var point in new[] { "0", "1", "2", "3", "5", "8", "13", "21", "?", "☕" })
        {
            var isSelected = point == Room?.Participants
            .FirstOrDefault(p => p.Name == UserName)?.SelectedPoints;

            <button @onclick="() => SelectPoint(point)"
                    class="card-button @(isSelected ? "selected" : "")"
                    disabled="@(Room?.PointsRevealed == true)">
                <img src="/Sprites/PlanningPokerCardSmaller.png" alt="Card" class="card-image" />
                <span class="card-text">@point</span>
            </button>
        }
    </div>
</div>

@code {
    [Parameter]
    public string RoomName { get; set; } = "";

    private Room? Room => PlanningService.GetRoomByName(RoomName);
    private string? UserName; // Name retrieved from local storage
    private bool IsScrumMaster => Room?.Participants.Any(p => p.Name == UserName && p.IsScrumMaster) ?? false;
    private double? AverageStoryPoints => CalculateAverage();

    protected override async Task OnInitializedAsync()
    {
        // Debug Room Name
        Console.WriteLine($"Debug - Navigated RoomName: {RoomName}");

        // Retrieve the user name from local storage
        UserName = await LocalStorage.GetItemAsync<string>("userName");
        Console.WriteLine($"Debug - Retrieved UserName: {UserName}");

        // Validate the room
        if (Room == null)
        {
            Console.WriteLine("Debug - Room not found, redirecting to landing page.");
            NavigationManager.NavigateTo("/");
            return;
        }

        // Add participant if not already present
        if (!string.IsNullOrEmpty(UserName) && !Room.Participants.Any(p => p.Name == UserName))
        {
            PlanningService.AddParticipant(Room.RoomId, UserName);
        }

        // Subscribe to state changes
        PlanningService.OnStateChanged += async () => await InvokeAsync(StateHasChanged);
    }

    private void SelectPoint(string point)
    {
        if (Room != null && !string.IsNullOrEmpty(UserName))
        {
            PlanningService.UpdateParticipantPoints(Room.RoomId, UserName, point);
        }
    }

    private void RevealPoints()
    {
        if (Room != null && !string.IsNullOrEmpty(UserName))
        {
            PlanningService.RevealPoints(Room.RoomId, UserName);
        }
    }

    private void ResetPoints()
    {
        if (Room != null && !string.IsNullOrEmpty(UserName))
        {
            PlanningService.ResetRoom(Room.RoomId, UserName);
        }
    }

    private void ReturnToLandingPage()
    {
        NavigationManager.NavigateTo("/");
    }

    private double? CalculateAverage()
    {
        if (Room == null) return null;

        var numericSelections = Room.Participants
            .Where(p => int.TryParse(p.SelectedPoints, out _))
            .Select(p => int.Parse(p.SelectedPoints))
            .ToList();

        if (numericSelections.Any())
        {
            return numericSelections.Average();
        }

        return null;
    }

    public void Dispose()
    {
        PlanningService.OnStateChanged -= async () => await InvokeAsync(StateHasChanged);
    }
}
