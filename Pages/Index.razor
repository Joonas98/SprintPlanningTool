@page "/"
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject PlanningService PlanningService
@inject NavigationManager NavigationManager

<div class="landing-container">
    <h1 class="title">Welcome to Sprint Planning</h1>

    <div class="input-section">
        <input @bind="UserName" placeholder="Enter your name" class="name-input" />
        <input @bind="RoomName" placeholder="Enter room name" class="room-input" />
    </div>

    <button @onclick="JoinOrCreateRoom" class="action-button" disabled="@IsButtonDisabled">
        Join/Create Room
    </button>

    @if (ShowError)
    {
        <p class="error-text">@ErrorMessage</p>
    }
</div>

@code {
    private string? UserName;
    private string? RoomName;
    private bool ShowError = false;
    private string ErrorMessage = "";
    private bool IsInitialized = false;

    private bool IsButtonDisabled => string.IsNullOrEmpty(UserName) || string.IsNullOrEmpty(RoomName);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !IsInitialized)
        {
            try
            {
                // Load UserName from local storage
                UserName = await LocalStorage.GetItemAsync<string>("userName");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error accessing local storage: {ex.Message}");
            }

            IsInitialized = true;
            StateHasChanged(); // Update UI after retrieving data
        }
    }

    private async Task JoinOrCreateRoom()
    {
        try
        {
            ShowError = false; // Reset error state
            ErrorMessage = "";

            // Save the user name in local storage
            if (!string.IsNullOrEmpty(UserName))
            {
                await LocalStorage.SetItemAsync("userName", UserName);
            }

            // Check if the room exists
            var existingRoom = PlanningService.GetRoomByName(RoomName);
            if (existingRoom != null)
            {
                // Join the existing room
                PlanningService.AddParticipant(existingRoom.RoomId, UserName);
                NavigationManager.NavigateTo($"/room/{existingRoom.RoomId}");
            }
            else
            {
                // Create a new room
                var newRoomId = PlanningService.CreateRoom(RoomName);
                PlanningService.AddParticipant(newRoomId, UserName);
                NavigationManager.NavigateTo($"/room/{newRoomId}");
            }
        }
        catch (Exception ex)
        {
            ShowError = true;
            ErrorMessage = "An error occurred: " + ex.Message;
        }
    }
}
